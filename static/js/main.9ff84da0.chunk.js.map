{"version":3,"sources":["components/getbtn.js","components/delbtn.js","components/details.js","App.js","serviceWorker.js","index.js"],"names":["GetBtn","className","onSubmit","this","props","getMovie","React","Component","DelBtn","delMovie","Description","title","parseInt","release","src","poster","API_KEY","App","state","id","undefined","error","movieStorage","Map","getRandomNumber","num","from","Math","floor","random","e","a","preventDefault","filmsAmount","filmNumber","filmPage","filmNumberOnPage","fetch","api_url","json","data","localStorage","getItem","results","set","has","size","setState","release_date","poster_path","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAYeA,E,iLARb,OACC,0BAAMC,UAAU,WAAWC,SAAUC,KAAKC,MAAMC,UAC/C,4BAAQJ,UAAU,iBAAlB,kB,GAJiBK,IAAMC,WCUZC,E,iLARb,OACC,0BAAMP,UAAU,WAAWC,SAAUC,KAAKC,MAAMK,UAC/C,kD,GAJiBH,IAAMC,WCaZG,EAbK,SAAAN,GAAK,OACxB,yBAAKH,UAAU,kBACbG,EAAMO,OACN,yBAAKV,UAAU,oBACd,uBAAGA,UAAU,iBAAiBG,EAAMO,MAApC,WAA+CC,SAASR,EAAMS,SAA9D,MACA,yBAAKZ,UAAU,cAAca,IAAG,0CAAqCV,EAAMW,aCAzEC,EAAU,mCAiFDC,E,2MA7EdC,MAAQ,CACPC,QAAIC,EACJT,WAAOS,EACPP,aAASO,EACTL,YAAQK,EACRC,WAAOD,EACPE,aAAc,IAAIC,K,EAEnBC,gBAAkB,SAACC,EAAKC,GACvB,OAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMC,I,EAE1CrB,S,uCAAW,WAAOyB,GAAP,yBAAAC,EAAA,6DACND,GAAGA,EAAEE,iBAEHC,EAAc,IAChBC,EAAa,EAAKV,gBAAgBS,EAAa,GAC/CE,EAAWR,KAAKC,MAAMM,EAAa,IAAM,EACzCE,EAAmBF,EAAa,GAN1B,SAYYG,MAAM,wDAAD,OAAyDrB,EAAzD,gCAAwFmB,IAZzG,cAYJG,EAZI,iBAaSA,EAAQC,OAbjB,WAaJC,EAbI,QAgBNC,aAAaC,QAAQF,EAAKG,QAAQP,GAAkBjB,IAhB9C,wBAiBT,EAAKD,MAAMI,aAAasB,IAAIJ,EAAKG,QAAQP,GAAkBjB,GAAI,WAC/D,EAAKd,WAlBI,+BAsBN,EAAKa,MAAMI,aAAauB,IAAIL,EAAKG,QAAQP,GAAkBjB,IAtBrD,oBAuBL,EAAKD,MAAMI,aAAawB,MAAQb,EAvB3B,0DA2BT,EAAK5B,WA3BI,2BA+BV,EAAK0C,SAAS,CACb5B,GAAIqB,EAAKG,QAAQP,GAAkBjB,GACnCR,MAAO6B,EAAKG,QAAQP,GAAkBzB,MACtCE,QAAS2B,EAAKG,QAAQP,GAAkBY,aACxCjC,OAAQyB,EAAKG,QAAQP,GAAkBa,YACvC5B,MAAO,KAER,EAAKH,MAAMI,aAAasB,IAAI,EAAK1B,MAAMC,GAAI,WAtCjC,4C,wDAwCXV,SAAW,SAACqB,GACXA,EAAEE,iBAGFS,aAAaS,QAAQ,EAAKhC,MAAMC,GAAI,WACpC,EAAKd,Y,wEAKL,OACC,yBAAKJ,UAAU,QAEd,kBAAC,EAAD,CACCkB,GAAIhB,KAAKe,MAAMC,GACfR,MAAOR,KAAKe,MAAMP,MAClBE,QAASV,KAAKe,MAAML,QACpBE,OAAQZ,KAAKe,MAAMH,SAEpB,kBAAC,EAAD,CAAQV,SAAUF,KAAKE,WACvB,kBAAC,EAAD,CAAQI,SAAUN,KAAKM,gB,GAzETH,IAAMC,WCGJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ff84da0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass GetBtn extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form className=\"getMovie\" onSubmit={this.props.getMovie}>\r\n\t\t\t\t<button className=\"getMovie__btn\">Get movie</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default GetBtn;","import React from \"react\";\r\n\r\nclass DelBtn extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form className=\"delMovie\" onSubmit={this.props.delMovie}>\r\n\t\t\t\t<button>Del movie</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DelBtn;","import React from \"react\";\r\n\r\nconst Description = props => (\r\n\t<div className=\"poster-wrapper\">\r\n\t\t{props.title &&\r\n\t\t\t<div className=\"poster-container\">\r\n\t\t\t\t<p className=\"poster__descr\">{props.title}{`(${parseInt(props.release)})`}</p>\r\n\t\t\t\t<img className=\"poster__img\" src={`https://image.tmdb.org/t/p/w342/${props.poster}`} />\r\n\r\n\t\t\t</div>\r\n\t\t}\r\n\t</div>\r\n);\r\n\r\n\r\nexport default Description;","import React from \"react\";\r\n\r\nimport GetBtn from \"./components/getbtn\";\r\nimport DelBtn from \"./components/delbtn\"\r\nimport Description from \"./components/details\";\r\n//import { getConsoleOutput } from \"@jest/console\";\r\n\r\nconst API_KEY = \"82b270dc96b69476d16ea855c6387d3b\";\r\n\r\nclass App extends React.Component {\r\n\r\n\tstate = {\r\n\t\tid: undefined,\r\n\t\ttitle: undefined,\r\n\t\trelease: undefined,\r\n\t\tposter: undefined,\r\n\t\terror: undefined,\r\n\t\tmovieStorage: new Map(),\r\n\t}\r\n\tgetRandomNumber = (num, from) => {\r\n\t\treturn +Math.floor(Math.random() * num + from);\r\n\t}\r\n\tgetMovie = async (e) => {\r\n\t\tif (e) e.preventDefault();\r\n\r\n\t\tconst filmsAmount = 100;\r\n\t\tlet filmNumber = this.getRandomNumber(filmsAmount, 0);\r\n\t\tlet filmPage = Math.floor(filmNumber / 20) + 1;\r\n\t\tlet filmNumberOnPage = filmNumber % 20;\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t\tconst api_url = await fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US&page=${filmPage}`);\r\n\t\tconst data = await api_url.json();\r\n\r\n\r\n\t\tif (localStorage.getItem(data.results[filmNumberOnPage].id)) {\r\n\t\t\tthis.state.movieStorage.set(data.results[filmNumberOnPage].id, \"skipped\");\r\n\t\t\tthis.getMovie();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.state.movieStorage.has(data.results[filmNumberOnPage].id)) {\r\n\t\t\tif (this.state.movieStorage.size == filmsAmount) {\r\n\t\t\t\t//need add last slide\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.getMovie();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tid: data.results[filmNumberOnPage].id,\r\n\t\t\ttitle: data.results[filmNumberOnPage].title,\r\n\t\t\trelease: data.results[filmNumberOnPage].release_date,\r\n\t\t\tposter: data.results[filmNumberOnPage].poster_path,\r\n\t\t\terror: \"\"\r\n\t\t});\r\n\t\tthis.state.movieStorage.set(this.state.id, \"skipped\");\r\n\t}\r\n\tdelMovie = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\r\n\t\tlocalStorage.setItem(this.state.id, \"deleted\");\r\n\t\tthis.getMovie();\r\n\t\t//console.log(localStorage.getItem(this.state.id));\r\n\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"main\">\r\n\r\n\t\t\t\t<Description\r\n\t\t\t\t\tid={this.state.id}\r\n\t\t\t\t\ttitle={this.state.title}\r\n\t\t\t\t\trelease={this.state.release}\r\n\t\t\t\t\tposter={this.state.poster}\r\n\t\t\t\t/>\r\n\t\t\t\t<GetBtn getMovie={this.getMovie} />\r\n\t\t\t\t<DelBtn delMovie={this.delMovie} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}